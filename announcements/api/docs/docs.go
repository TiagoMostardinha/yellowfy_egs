// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Get all announcements from the database or filter by location and radius",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Get all announcements",
                "parameters": [
                    {
                        "type": "string",
                        "description": "id of user who created the announcement",
                        "name": "userID",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "radius in meters",
                        "name": "radius",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "latitude",
                        "name": "lat",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "description": "longitude",
                        "name": "long",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "name of the contractor",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Announcement"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "503": {
                        "description": "Service Unavailable",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new announcement in the database",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Create a new announcement",
                "parameters": [
                    {
                        "description": "announcement object",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Checks if the API is running.",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "OK"
                    }
                }
            }
        },
        "/{id}": {
            "get": {
                "description": "Get announcement by ID from the database",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Get announcement by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "announcement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            },
            "put": {
                "description": "Update announcement by ID from the database",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Update announcement by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "announcement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "announcement object",
                        "name": "announcement",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Announcement"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete announcement by ID from the database",
                "produces": [
                    "applcation/json"
                ],
                "tags": [
                    "Announcements"
                ],
                "summary": "Delete announcement by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "announcement ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.APIMessage"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/models.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.APIError": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "models.APIMessage": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "status_code": {
                    "type": "integer"
                }
            }
        },
        "models.Announcement": {
            "type": "object",
            "properties": {
                "category": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "location": {
                    "$ref": "#/definitions/models.Coordinates"
                },
                "name": {
                    "type": "string"
                },
                "userID": {
                    "type": "string"
                }
            }
        },
        "models.Coordinates": {
            "type": "object",
            "properties": {
                "lat": {
                    "type": "number"
                },
                "long": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "grupo6-egs-deti.ua.pt/announcements",
	BasePath:         "/v1",
	Schemes:          []string{},
	Title:            "Announcements service API",
	Description:      "This is the API for the announcements service in GO with Gin Framework.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
